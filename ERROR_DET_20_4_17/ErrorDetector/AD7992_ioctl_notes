

ioctl(file, I2C_RDWR, struct i2c_rdwr_ioctl_data *msgset)

  Do combined read/write transaction without stop in between.
  Only valid if the adapter has I2C_FUNC_I2C.  The argument is
  a pointer to a

  struct i2c_rdwr_ioctl_data {
      struct i2c_msg *msgs;  /* ptr to array of simple messages */
      int nmsgs;             /* number of messages to exchange */
  }

  The msgs[] themselves contain further pointers into data buffers.
  The function will write or read data to or from that buffers depending
  on whether the I2C_M_RD flag is set in a particular message or not.
  The slave address and whether to use ten bit address mode has to be
  set in each message, overriding the values set with the above ioctl's.


  ///////////////////////////////////////////////////////////////////

  struct i2c_msg {
  __u16 addr;
  __u16 flags;
  __u16 len;
  __u8 * buf;

  #define I2C_M_TEN           0x0010
  #define I2C_M_RD            0x0001
  #define I2C_M_NOSTART       0x4000
  #define I2C_M_REV_DIR_ADDR  0x2000
  #define I2C_M_IGNORE_NAK    0x1000
  #define I2C_M_NO_RD_ACK     0x0800
  #define I2C_M_RECV_LEN      0x0400
};  


addr

    Slave address, either seven or ten bits. When this is a ten bit address, I2C_M_TEN must be set in flags and the adapter must support I2C_FUNC_10BIT_ADDR.

flags

    I2C_M_RD is handled by all adapters. No other flags may be provided unless the adapter exported the relevant I2C_FUNC_* flags through i2c_check_functionality. 
len

    Number of data bytes in buf being read from or written to the I2C slave address. For read transactions where I2C_M_RECV_LEN is set, the caller guarantees that this buffer can hold up to 32 bytes in addition to the initial length byte sent by the slave (plus, if used, the SMBus PEC); and this value will be incremented by the number of block data bytes received. 
buf

    The buffer into which data is read, or from which it's written. 

//////////////////////////////////////////

struct i2c_rdwr_ioctl_data ioctlMsg;
struct i2c_msg msg[2];

BYTE writeBuf[1];
BYTE readBuf [4];

writeBuf = 0x30;

//msg[0].addr = DEV_ADDR;
msg[0].flags = 0; //write
msg[0].len = 1;
msg[0].buf = writeBuf;

//msg[1].addr = DEV_ADDR;
msg[1].flags = 1; //?read?
msg[1].len = 4;
msg[1].buf = readBuf;

ioctlMsg.msgs = msg;
ioctlMsg.nmsgs = 2;

if(ioctl(file,  I2C_RDWR, &ioctlMsg) < 0)
{
  std::cout << "ioctl failed" << std::endl;
}